module BookKeeping 
  VERSION=3 
end 
 

class Game 
 
  TOTAL_FRAMES=10 
 
  attr :rolls, :id 
 

  def initialize 
    @rolls = [] 
    @frame = Frame.new(false, nil) 
  end 
 

  def roll(pins) 
    unless @frame 
      raise BowlingError.new("no active frame, the game stop") 
    end 
 
    @frame.roll(pins) 
 
    if @frame.closed? 
      @rolls.push(@frame) 
 
      if @rolls.size < TOTAL_FRAMES 
        @frame = Frame.new((@rolls.size + 1) == TOTAL_FRAMES, @frame)  
      else 
        @frame = nil 
      end 
    end 
    puts " Frame No.: #{@frame},\n"
    puts " Pins got: #{@rolls},\n"
  end 
 

  def score 
    if @rolls.size < TOTAL_FRAMES 
      raise BowlingError.new(" frames are played to be scored") 
    end 
 
    @rolls.map(&:score).inject(0, :+) 
    
    puts "Total score: frame_score , \n"
  end 
 

  class BowlingError < Exception 
    def initialize(message) 
      super(message) 
    end 
  end 
end 
 
class Frame 
   

  STARTING_PINS=10 
 
  attr :previous_frame, :rolls, :remaining_pins, :final_frame, :game_id 
 
 
  def initialize(final_frame, previous_frame) 
  
    @remaining_pins = STARTING_PINS 
    @rolls = [] 
     

    @final_frame= final_frame 
    @previous_frame = previous_frame 
  end 
 

  def roll(pins) 
    raise Game::BowlingError.new("no rolling in a closed frame") if closed? 
 
    raise Game::BowlingError.new("hit a positive number of pins") if pins < 0 
     
    if @remaining_pins - pins < 0 
      raise Game::BowlingError.new("can't hit more pins than there are standing") 
    end 
 
    @rolls.push(pins) 
 

    @remaining_pins -= pins 
 

    if @remaining_pins == 0 
      @remaining_pins = STARTING_PINS 
    end 
  end 
 

  def score 
    unless closed? 
      raise Game::BowlingError.new("calculate score of a closed frame") 
    end 
 
    frame_score = 0 
    @rolls.each_with_index do |pins, roll_number| 
      frame_score = frame_score + (pins * roll_bonus(roll_number)) 
    end 
 
    frame_score 
    puts "Frame Score: frame_score; \n"
  end 
 

  def closed? 

    if @final_frame && (spare? || strike?) 
      @rolls.size == 3 
    else 
      @rolls.size == 2 || (@rolls.size == 1 && strike?) 
    end 
  end 
 

  def spare? 
    @rolls.size >= 2 && @rolls[0..1].inject(0, :+) == STARTING_PINS 
  end 
 

  def strike? 
    @rolls[0] == STARTING_PINS 
  end 
 
  private 
 

  def roll_bonus(roll_number) 
    multiplier = 1 
     
    previous_frame_was_strike= @previous_frame && @previous_frame.strike? 
     
    last_two_rolls_were_strikes= previous_frame_was_strike && (@previous_frame.previous_frame && @previous_frame.previous_frame.strike?) 
     
    previous_frame_was_spare= @previous_frame && @previous_frame.spare? 
 
    if roll_number == 0 && previous_frame_was_spare 
      multiplier += 1 
    elsif roll_number < 2 && previous_frame_was_strike 
      multiplier += 1 
 
      if roll_number == 0 && last_two_rolls_were_strikes 
        multiplier += 1 
      end 
    end 
 
    multiplier 
  end   
end 
 